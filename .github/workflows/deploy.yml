name: HomeThings CI

on:
  workflow_dispatch:

jobs:
  copy-compose:
    name: Push docker-compose to remote server
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Copy docker-compose.yaml via SSH
        uses: appleboy/scp-action@master
        with:
          host: ${{secrets.SSH_HOST}}
          username: ${{secrets.SSH_USER}}
          key: ${{secrets.SSH_PRIVATE_KEY}}
          source: "docker-compose.yml"
          target: ${{secrets.PROJECT_FOLDER}}
          overwrite: true

  changes-filter:
    name: Apply changes filter on modules
    runs-on: ubuntu-latest
    outputs:
      tg-bot-service: ${{ steps.filter.outputs.tg-bot-service }}
      eureka-service: ${{ steps.filter.outputs.eureka-service }}
      gateway-service: ${{ steps.filter.outputs.gateway-service }}
      local-service: ${{ steps.filter.outputs.local-service }}
      api-service: ${{ steps.filter.outputs.api-service }}
      frontend: ${{ steps.filter.outputs.frontend }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Apply changes filter
        uses: dorny/paths-filter@v2 
        id: filter
        with:
          filters: |
            tg-bot-service:
              - 'tg-bot-service/**'
            eureka-service:
              - 'eureka-service/**'
            gateway-service:
              - 'gateway-service/**'
            local-service:
              - 'local-service/**'
            api-service:
              - 'api-service/**'
            frontend:
              - 'frontend-service/**'

  build-and-push-images:
    name: Push images to Dockerhub
    runs-on: ubuntu-latest
    needs: changes-filter
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Eureka service build and push to Dockerhub
        if: ${{ needs.changes-filter.outputs.eureka-service == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /eureka-service/Dockerfile
          push: true
          tags: verpul/homethings:eureka-service

      - name: Gateway service build and push to Dockerhub
        if: ${{ needs.changes-filter.outputs.gateway-service == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /gateway-service/Dockerfile
          push: true
          tags: verpul/homethings:gateway-service

      - name: Local service build and push to Dockerhub
        if: ${{ needs.changes-filter.outputs.local-service == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /local-service/Dockerfile
          push: true
          tags: verpul/homethings:local-service

      - name: API service build and push to Dockerhub
        if: ${{ needs.changes-filter.outputs.api-service == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /api-service/Dockerfile
          push: true
          tags: verpul/homethings:api-service

      - name: Frontend build and push to Dockerhub
        if: ${{ needs.changes-filter.outputs.frontend == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /frontend-service/Dockerfile
          push: true
          tags: verpul/homethings:frontend
          build-args: |
            SERVER_HOST=${{ secrets.SERVER_HOST }}

      - name: TG bot service build and push to Dockerhub
        if: ${{ needs.changes-filter.outputs.tg-bot-service == 'true' }}
        uses: docker/build-push-action@v2
        with:
          file: /tg-bot-service/Dockerfile
          push: true
          tags: verpul/homethings:tg-bot-service

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ build-and-push-images, changes-filter, copy-compose ]
    steps:
      - name: Run command on remote server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{secrets.SSH_HOST}}
          username: ${{secrets.SSH_USER}}
          key: ${{secrets.SSH_PRIVATE_KEY}}
          script: |
            cd ${{secrets.PROJECT_FOLDER}}
            echo POSTGRES_USER=${{secrets.POSTGRES_USER}} > .env
            echo POSTGRES_PASSWORD=${{secrets.POSTGRES_PASSWORD}} >> .env
            echo KEYCLOAK_ADMIN=${{secrets.KEYCLOAK_ADMIN}} >> .env
            echo KEYCLOAK_ADMIN_PASSWORD=${{secrets.KEYCLOAK_ADMIN_PASSWORD}} >> .env
            echo TELEGRAM_BOT_NAME=${{secrets.TELEGRAM_BOT_NAME}} >> .env
            echo TELEGRAM_BOT_TOKEN=${{secrets.TELEGRAM_BOT_TOKEN}} >> .env
            echo TELEGRAM_BOT_CHAT_ID=${{secrets.TELEGRAM_BOT_CHAT_ID}} >> .env
            echo SERVER_HOST=${{ secrets.SERVER_HOST }} >> .env
            
            if ${{ needs.changes-filter.outputs.eureka-service}}; then
              docker stop eureka-service
              docker rm eureka-service
              docker rmi verpul/homethings:eureka-service
            fi
            
            if ${{ needs.changes-filter.outputs.gateway-service}}; then
              docker stop gateway-service
              docker rm gateway-service
              docker rmi verpul/homethings:gateway-service
            fi
            
            if ${{ needs.changes-filter.outputs.local-service}}; then
              docker stop local-service
              docker rm local-service
              docker rmi verpul/homethings:local-service
            fi

            if ${{ needs.changes-filter.outputs.api-service}}; then
              docker stop api-service
              docker rm api-service
              docker rmi verpul/homethings:api-service
            fi

            if ${{ needs.changes-filter.outputs.frontend}}; then
              docker stop frontend
              docker rm frontend
              docker rmi verpul/homethings:frontend
            fi
            
            if ${{ needs.changes-filter.outputs.tg-bot-service}}; then
              docker stop tg-bot-service
              docker rm tg-bot-service
              docker rmi verpul/homethings:tg-bot-service
            fi 

            docker compose --file docker-compose.yml --env-file .env up -d
            rm .env
          

           
